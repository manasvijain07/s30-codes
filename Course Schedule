There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:

1 <= numCourses <= 105
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.

----------------------*******-----------------------

Solution - BFS - 
          TC - O(V+ E) where V - no of vertices, E - no of edges
          SC - O(V+ E) where V - no of vertices, E - no of edges

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Queue<Integer> q = new LinkedList<>();  // courses that will be processed will be stored in this
        int[] indegree = new int[numCourses];   // check how many dependencies are present for each courses
        HashMap<Integer, List<Integer>> map = new HashMap<>();  // for adjacency list
        
        for(int[] edge: prerequisites)
        {
            indegree[edge[0]]++;
            if(!map.containsKey(edge[1]))
            {
                map.put(edge[1], new ArrayList<>());
            }
            map.get(edge[1]).add(edge[0]);
        }
        
        int count = 0;
        
        for(int i = 0; i < numCourses; i++)
        {
            if(indegree[i] == 0)
            {
                q.add(i);
                count++;
            }
        }
        
        if(count == numCourses)
            return true;
        
        while(!q.isEmpty())
        {
            int poppedNode = q.poll();
            List<Integer> dependentNodes = map.get(poppedNode);
            if(dependentNodes != null)
            {
                for(int node: dependentNodes)
                {
                    indegree[node]--;
                    if(indegree[node] == 0)
                    {
                        q.add(node);
                        count++;
                    }
                }
            }
        
        }
        return count == numCourses;
        
    }
}
