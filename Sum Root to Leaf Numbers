You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

 

Example 1:


Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:


Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 9
The depth of the tree will not exceed 10.

--------------------------****-----------------------

Solution 1 -  Recursion - can work for preorder, inorder and postorder - 
              TC - O(n) n - no of nodes
              SC - O(h) h - height of tree    (worst case - O(n) when h = n)
              
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int sum = 0;
    public int sumNumbers(TreeNode root) {
        helper(root, 0);
        return sum;
    }
    
    private void helper(TreeNode root, int currNum)
    {
        // base case
        if(root == null)
            return;
        
        if(root.left == null && root.right == null)
        {
            sum += currNum * 10 + root.val;
            return;
        }
        
        // logic
        helper(root.left, currNum * 10 + root.val);
        helper(root.right, currNum * 10 + root.val);
        return;
    }
}

Solution 2 -  Iterative - 
              TC - O(n) n - no of nodes
              SC - O(h) h - height of tree    (worst case - O(n) when h = n)
              
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        class Pair
        {
            TreeNode node;
            int val;
            
            Pair(TreeNode node, int val)
            {
                this.node = node;
                this.val = val;
            }
            
            TreeNode getNode()
            {
                return node;
            }
            
            int getVal()
            {
                return val;
            }
        }
        
        int sum = 0, currNum = 0;
        Stack<Pair> stack = new Stack<>();
        
        while(root != null || !stack.isEmpty())
        {
            while(root != null)
            {
                currNum = currNum * 10 + root.val; 
                Pair p = new Pair(root, currNum);
                stack.push(p);
                root = root.left;
            }
            
            Pair p = stack.pop();
            root = p.getNode();
            currNum = p.getVal();
            
            if(root.left == null && root.right == null)
            {
                sum += currNum;
            }
            root = root.right;
        }
        
        return sum;
    }
}
