Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?


-----------------------*********-----------------------

Solution - 3 pointers for 0, 1 and 2 
          TC - O(n) SC - O(1)

class Solution {
    public void sortColors(int[] nums) {
        int low = 0, mid = 0, high = nums.length - 1;
        
        while(mid <= high)
        {
            if(nums[mid] == 2)
            {
                swap(nums, mid, high);
                high--;
            }
            else if(nums[mid] == 0)
            {
                swap(nums, mid, low);
                low++;
                mid++;
            }
            else
            {
                mid++;
            }
        }
    }
    
    public void swap(int[] nums, int a, int b)
    {
        int t = nums[a];
        nums[a] = nums[b];
        nums[b] = t;
    }
}
