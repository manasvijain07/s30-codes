You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104

---------------------------*****-----------------------------

Solution 1 - 
Brute force - TC - O(n ^ 2) SC - O(1)

    public int maxArea(int[] height) {
        int max = 0;
        
        for(int i = 0; i < height.length; i++)
        {
            for(int j = i + 1; j < height.length; j++)
            {
                int h = Math.min(height[i], height[j]);
                int w = (j - i);
                max = Math.max(max, w * h);
            }
        }
        return max;
    }
    
 Solution 2 - 
 Two pointers - TC - O(n)  SC - O(1)
 
 public int maxArea(int[] height) {
        int max = 0;
        
        int low = 0, high = height.length - 1;
        while(low < high)
        {
            int h = Math.min(height[low], height[high]);
            int w = (high - low);
            max = Math.max(max, w * h);
            
            if(height[low] < height[high])
            {
                low ++;
            }
            else
            {
                high--;
            }
        }
        
        return max;
    }
