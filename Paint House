There is a row of n houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an n x 3 cost matrix costs.

For example, costs[0][0] is the cost of painting house 0 with the color red; costs[1][2] is the cost of painting house 1 with color green, and so on...
Return the minimum cost to paint all houses.

 

Example 1:

Input: costs = [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.
Minimum cost: 2 + 5 + 3 = 10.
Example 2:

Input: costs = [[7,6,2]]
Output: 2
 

Constraints:

costs.length == n
costs[i].length == 3
1 <= n <= 100
1 <= costs[i][j] <= 20

--------------------------*****--------------------------
Solution - 

1) Greedy - take min values from each row and also ensuring no 2 adjacent rows are of same color. This will fail in few cases

2) Exhaustive - TC - O(3 * 2^n). This will give time limit exceeded

 public int minCost(int[][] costs) {
        if(costs == null || costs.length == 0)
            return 0;
        
        int case1 = helper(costs, 0, 0, 0);
        int case2 = helper(costs, 0, 1, 0);
        int case3 = helper(costs, 0, 2, 0);
        
        return Math.min(case1, Math.min(case2, case3));
    }
    
    public int helper(int[][] costs, int rowindex, int color, int amount)
    {
        // base case
        if(rowindex == costs.length) return amount;
        
        // choose red
        if(color == 0)
        {
            return Math.min(
                helper(costs, rowindex + 1, 1, amount + costs[rowindex][0]),                     helper(costs, rowindex + 1, 2, amount + costs[rowindex][0])
            );
        }
        
        // choose green
        if(color == 1)
        {
            return Math.min(
                helper(costs, rowindex + 1, 0, amount + costs[rowindex][1]),                     helper(costs, rowindex + 1, 2, amount + costs[rowindex][1])
            );
        }
        
        // choose blue
        if(color == 2)
        {
            return Math.min(
                helper(costs, rowindex + 1, 0, amount + costs[rowindex][2]),                     helper(costs, rowindex + 1, 1, amount + costs[rowindex][2])
            );
        }
        
        return -1;
    }
}


3) Bottom up approach - TC - O(n) n - no of rows
SC - O(1) if we use same input array

class Solution {
    public int minCost(int[][] costs) {
        if(costs == null || costs.length == 0)
            return 0;
        
        for(int i = costs.length - 2; i >= 0; i--)
        {
            costs[i][0] += Math.min(costs[i + 1][1], costs[i + 1][2]);
            costs[i][1] += Math.min(costs[i + 1][0], costs[i + 1][2]);
            costs[i][2] += Math.min(costs[i + 1][0], costs[i + 1][1]);
        }
        
        return Math.min(costs[0][0], Math.min(costs[0][1], costs[0][2]));
    }
}
