Longest Palindrome - 

Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

Letters are case sensitive, for example, "Aa" is not considered a palindrome here.

 

Example 1:

Input: s = "abccccdd"
Output: 7
Explanation:
One longest palindrome that can be built is "dccaccd", whose length is 7.
Example 2:

Input: s = "a"
Output: 1
Example 3:

Input: s = "bb"
Output: 2
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase and/or uppercase English letters only.

-----------------------------*****-----------------------------------

Solution 1-

Two pass hashmap - TC - O(n) SC - O(1)
public int longestPalindrome(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        
        for(char c: s.toCharArray())
        {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
                    
        int result = 0; 
        boolean oddAvail = false;
        
        for(Integer count : map.values())
        {
            if(count % 2 == 0)
            {
                result += count;
            }
            else
            {
                oddAvail = true;
                result += count - 1;
            }
        }
        
        return oddAvail ? result + 1 : result;
    }
    


Solution 2
One pass Hashset - TC - O(n) SC - O(1)
public int longestPalindrome(String s) {
        HashSet<Character> set = new HashSet<>();
        int result = 0;
        
        for(char c: s.toCharArray())
        {
            if(set.contains(c))
            {
                result += 2;
                set.remove(c);
            }
            else
            {
                set.add(c);
            }
        }
        return set.isEmpty() ? result: result + 1;
    }
