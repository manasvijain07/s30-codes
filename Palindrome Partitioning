Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.

---------------------------------

Solution 1 - for loop based backtracking
TC - O(n . 2^n) - there could be 2^{N} possible substrings in the worst case. For each substring, it takes O(N) time to generate substring 
and determine if it a palindrome or not. 

SC - O(n) - recursive stack

class Solution {
    List<List<String>> res;
    public List<List<String>> partition(String s) {
        res = new ArrayList<>();
        
        if(s == null || s.length() == 0)
            return res;
        
        helper(s, 0, new ArrayList<>());
        return res;
            
    }
    
    public void helper(String s, int index, List<String> path)
    {
        // base case
        if(index == s.length())
        {
            res.add(new ArrayList<>(path));
        }
        
        for(int i = index; i < s.length(); i++)
        {
            String subStr = s.substring(index, i + 1);
            if(isPalindrome(subStr, 0, subStr.length() - 1))
            {
                path.add(subStr);
                helper(s, i + 1, path);
                path.remove(path.size() - 1);
            }
        }
    }
    
    public boolean isPalindrome(String s, int start, int end)
    {
        while(start < end)
        {
            if(s.charAt(start) != s.charAt(end))
            {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
