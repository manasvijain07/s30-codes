Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.

-----------------*******----------------------

Solution - 
Solution 1 - Not an optimized solution
              
class Solution {
    public List<List<String>> groupAnagrams(String[] strs)
        List<List<String>> result = new ArrayList<>();
        
        ArrayList<String> a = new ArrayList<>(Arrays.asList(strs[0]));
        result.add(new ArrayList<>(a));
        
        if(strs.length == 0)
        {
            return result;
        }
        
        for(int i = 1; i < strs.length; i++)
        {
            boolean isSet = false;
            for(int j = 0; j < result.size(); j++)
            {
                if(isAnagram(strs[i], result.get(j).get(0)))
                {
                    isSet = true;
                    result.get(j).add(strs[i]);
                    break;
                }
            }
            if(!isSet)
            {
                ArrayList<String> b = new ArrayList<>(Arrays.asList(strs[i]));
                result.add(new ArrayList<>(b));
            }
        }
        return result;
    }
    
    public boolean isAnagram(String a, String b)
    {
        if(a.length() != b.length())
        {
            return false;
        }
        
        int[] match = new int[256];
        
        int i = 0, j = 0;
        
        while(i < a.length())
        {
            match[a.charAt(i++) - 'a']++;
            match[b.charAt(j++) - 'a']--;
        }
        
        for(int k = 0; k < 256; k++)
        {
            if(match[k] != 0)
            {
                return false;
            }
        }
        return true;
        
    }
    
 Solution 2 - Optimized
              TC - O(m * n log n) where m - length of string, n - maximum length of string in strs
              SC - O(m * n) where m - length of string, n - maximum length of string in strs
 
 class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> result = new ArrayList<>();
        
        HashMap<String, List<String>> map = new HashMap<>();
        
        for(String s: strs)
        {
            char[] c = s.toCharArray();
            Arrays.sort(c);
            
            String newString = new String(c);
            
            if(!map.containsKey(newString))
            {
                map.put(newString, new ArrayList<>());
            }
            map.get(newString).add(s);
        }
        
        result.addAll(map.values());
        return result;
        
    }
}


--------------------------

Solution 3 - no sorting
TC - O(n * k) where n - lenth of strs and k - max length of string in strs
SC - O(n * k)

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> res = new ArrayList<>();
        
        HashMap<String, List<String>> map = new HashMap<>();
        int m = strs.length;
        
        if(strs == null || m == 0)
            return res;
        
        for(String str: strs)
        {
            StringBuilder sb = new StringBuilder();
            HashMap<Character, Integer> innerMap = new HashMap<>();
            for(int j = 0; j < str.length(); j++)
            {
                innerMap.put(str.charAt(j), innerMap.getOrDefault(str.charAt(j), 0) + 1);
            }
            
            for(char i = 'a'; i <= 'z'; i++)
            {
                int count = 0;
                if(innerMap.containsKey(i))
                {
                    count = innerMap.get(i);
                }
                sb.append(i + count);
            }
            
            String s = sb.toString();
            if(!map.containsKey(s))
            {
                map.put(s, new ArrayList());
            }
            map.get(s).add(str);
        }
        
        for(String key: map.keySet())
        {
            res.add(map.get(key));
        }
        return res;
    }
}

