Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:

void add(key) Inserts the value key into the HashSet.
bool contains(key) Returns whether the value key exists in the HashSet or not.
void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.
 

Example 1:

Input
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]

Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)
 

Constraints:

0 <= key <= 106
At most 104 calls will be made to add, remove, and contains.

--------------------------*****--------------------------------

Solution - TC - O(1) for add, remove and contains
           SC - O(n) where n - no of values


class MyHashSet {
    boolean[][] bucket;
    int bucketSize;

    public MyHashSet() {
        bucketSize = 1000;
        bucket = new boolean[bucketSize][];
    }
    
    public int getHash1(int key)
    {
        return key % bucketSize;
    }
    
    public int getHash2(int key)
    {
        return key / bucketSize;
    }
    
    public void add(int key) {
        int add1 = getHash1(key);
        int add2 = getHash2(key);
        
        if(bucket[add1] == null)
        {
            if(add1 == 0)
            {
                bucket[add1] = new boolean[bucketSize + 1];
            }
            else
            {
                bucket[add1] = new boolean[bucketSize]; 
            }
        }
        
        bucket[add1][add2] = true;
    }
    
    public void remove(int key) {
        int add1 = getHash1(key);
        int add2 = getHash2(key);
        
        if(bucket[add1] != null)
        {
            if(bucket[add1][add2] == true)
            {
                bucket[add1][add2] = false;
            }
        }
        
    }
    
    public boolean contains(int key) {
        int add1 = getHash1(key);
        int add2 = getHash2(key);
        
        if(bucket[add1] == null)
            return false;
        
        else if(bucket[add1][add2] == true)
            return true;
        else
            return false;
        
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
