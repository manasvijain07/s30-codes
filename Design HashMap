Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 

Example 1:

Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
 

Constraints:

0 <= key, value <= 106
At most 104 calls will be made to put, get, and remove.

-----------------------****---------------------------

Solution - 


class MyHashMap {
    class Node
    {
        int key;
        int val;
        Node next;

        public Node(int key, int val)
        {
            this.key = key;
            this.val = val;
            this.next = null;
        }
    }

    private Node[] storage;
    private int mainSize;
    
    public MyHashMap() {
        mainSize = 10000;
        storage = new Node[mainSize];
    }
    
    public int getIndex(int key)
    {
        // return Integer.hashCode(key) % mainSize; ----> best when our key is other than int. Key can be string or array. Integer.hashCode(key) -> converts key to int and then generates hash code
        
        return key % mainSize;
    }
    
    public Node find(int key, Node node)
    {
        Node prev = null;
        Node curr = node;
        while(curr != null && curr.key != key)
        {
            prev = curr;
            curr = curr.next;
        }
        return prev;
    }
    
    // TC - O(1)
    public void put(int key, int value) {
        int index = getIndex(key);
        if(storage[index] == null)
        {
            storage[index] = new Node(-1, -1);
        }
        Node prev = find(key, storage[index]);
        
        // we have reached at end
        if(prev.next == null)
        {
            prev.next = new Node(key, value);
        }
        else
        {
            // we have found the node
            prev.next.val = value;
        }
    }
    
    // TC - O(1)
    public int get(int key) {
        int index = getIndex(key);
        if(storage[index] == null)
            return -1;
        
        Node prev = find(key, storage[index]);
        
        if(prev.next == null)
            return -1;
        else
            return prev.next.val;
    }
    
    // TC - O(1)
    public void remove(int key) {
        int index = getIndex(key);
        if(storage[index] == null)
            return;
        Node prev = find(key, storage[index]);
        
        if(prev.next == null)
            return;
        else
            prev.next = prev.next.next;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
