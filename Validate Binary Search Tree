Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

----------------------****-------------------------

Solution 1 - Recursive -  TC - O(n) n - no of nodes in tree  
                          SC - O(height of tree) cz at any given time stack will contain max of height of tree
                        
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode prev;
    public boolean isValidBST(TreeNode root) {
        prev = null;
        return inorder(root);
    }
    
    public boolean inorder(TreeNode root)
    {
        if(root == null)
            return true;
        
        boolean left = inorder(root.left);
        if(prev != null && prev.val >= root.val)
        {
            return false;
        }
        prev = root;
        boolean right = inorder(root.right);
        return left && right;
    }
}

Solution 2 - more optimized recursion - checks if my left side is not valid BST, it will end 
             TC - O(n) n - no of nodes in tree  
             SC - O(height of tree) cz at any given time stack will contain max of height of tree 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode prev;
    public boolean isValidBST(TreeNode root) {
        prev = null;
        return inorder(root);
    }
    
    public boolean inorder(TreeNode root)
    {
        if(root == null)
            return true;
        
        if(!inorder(root.left))
            return false;
        if(prev != null && prev.val >= root.val)
        {
            return false;
        }
        prev = root;
        return inorder(root.right);
    }
}
