Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in an ascending order, return compute the researcher's h-index.

According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n âˆ’ h papers have no more than h citations each.

If there are several possible values for h, the maximum one is taken as the h-index.

You must write an algorithm that runs in logarithmic time.

 

Example 1:

Input: citations = [0,1,3,5,6]
Output: 3
Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.
Example 2:

Input: citations = [1,2,100]
Output: 2
 

Constraints:

n == citations.length
1 <= n <= 105
0 <= citations[i] <= 1000
citations is sorted in ascending order.


---------------------------------------------

Solution 1 - Linear Search (h > h citiations and (n - h) < h citations)
// TC - O(n)
// SC - O(1)

class Solution {
    public int hIndex(int[] citations) {
        int k = 0;
        for(int i = citations.length; i > 0; i--)
        {
            if(citations[k] >= i)
                return i;
            k++;
        }
        return 0;
    }
}

Solution 2 - Binary Search
// TC - O(log n)
// SC - O(1)

class Solution {
    public int hIndex(int[] citations) {
        int n = citations.length;
        
        if(n == 0 || citations == null)
            return 0;
        
        int low = 0, high = n - 1;
        
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            int diff = n - mid;
            if(diff == citations[mid])
                return diff;
            else if(diff > citations[mid])
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        return n - low;
    }
}
