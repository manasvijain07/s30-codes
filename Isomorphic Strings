
Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.

-------------------------********------------------------

Solution -

// Time Complexity : O(n) where n - length of string(s and t are of same length)
// Space Complexity : O(n) where n - length of string(s and t are of same length)

class Solution {
    public boolean isIsomorphic(String s, String t) {
        if(s.length() != t.length()) return false;
        HashMap<Character, Character> mapS = new HashMap<>();
        HashMap<Character, Character> mapT = new HashMap<>();
        
        for(int i = 0; i < s.length(); i++)
        {
            if(!mapS.containsKey(s.charAt(i)))
            {
                mapS.put(s.charAt(i), t.charAt(i));
            }
            else
            {
                if(mapS.get(s.charAt(i)) != t.charAt(i))
                    return false;
            }
            if(!mapT.containsKey(t.charAt(i)))
            {
                mapT.put(t.charAt(i), s.charAt(i));
            }
            else
            {
                if(mapT.get(t.charAt(i)) != s.charAt(i))
                {
                    return false;
                }
            }
        }
        return true;
    }
}
