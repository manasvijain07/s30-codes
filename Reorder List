You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4]
Output: [1,4,2,3]
Example 2:


Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 

Constraints:

The number of nodes in the list is in the range [1, 5 * 104].
1 <= Node.val <= 1000

----------------------****-------------------------

Solution - 
TC - O(N)
SC = O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head == null || head.next == null)
            return;
        
        // find mid point
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast.next != null && fast.next.next != null)
        {
            fast = fast.next.next;
            slow = slow.next;
        }
        
        // slow will be our mid point
        fast = slow.next;   // fast will point to starting of new pointer
        slow.next = null;
        
        //reverse back of the list
        fast = reverse(fast);
        
        //merge them
        slow = head;
        ListNode temp;
        
        while(fast != null)
        {
            temp = slow.next;
            slow.next = fast;
            fast = fast.next;
            slow.next.next = temp;
            slow = temp;
        }
    }
    
    private ListNode reverse(ListNode head)
    {
        ListNode prev = null;
        ListNode current = head;
        ListNode fast = current.next;
        
        while(fast != null)
        {
            current.next = prev;
            prev = current;
            current = fast;
            fast = fast.next; 
        }
        
        current.next = prev;
        return current;
    }
}
