Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000

-------------****---------------

Solution 1 - Using queue - 
              TC - O(n) where n - no of nodes
              SC - O(total leaf nodes) = O(2 ^ (height of tree - 1))

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null)
            return result;
        
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int size = 0;
        
        while(!q.isEmpty())
        {
            size = q.size();
            ArrayList<Integer> list = new ArrayList<>();
            for(int i = 0; i < size; i++)
            {
                TreeNode temp = q.poll();
                list.add(temp.val);
                if(temp.left != null)
                    q.add(temp.left);
                if(temp.right != null)
                    q.add(temp.right);
            }
            result.add(list);
        }
        return result;   
    }
}

Solution 2 - Using Recursion
              TC - O(n)
              SC - O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> result;
    HashMap<Integer, List<Integer>> map ;
    public List<List<Integer>> levelOrder(TreeNode root) {
        result = new ArrayList<>();
        if(root == null)
            return result;
        
        map = new HashMap();
        helper(root, 0);
        for(int i = 0; i < map.size(); i++)
        {
            List<Integer> newList = map.get(i);
            result.add(newList);
        }
        return result;
        
    }
    
    private void helper(TreeNode root, int level)
    {
        if(root == null) return;
        if(!map.containsKey(level))
        {
            map.put(level, new ArrayList<>());
        }
        map.get(level).add(root.val);
        helper(root.left, level + 1);
        helper(root.right, level + 1);
    }
}
