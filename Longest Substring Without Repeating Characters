Given a string s, find the length of the longest substring without repeating characters.

 
Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

---------------------------------------------

Solution - sliding window
// TC - O(n) where n - length of s
// SC - O(1)

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0 || s == null)
            return 0;
        
        int start = 0, end = 0, result = 0;
        HashMap<Character, Integer> map = new HashMap<>();
        
        while(end < s.length())
        {
            if(map.containsKey(s.charAt(end)))
            {
                start = Math.max(start, map.get(s.charAt(end)));
            }
            map.put(s.charAt(end), end + 1);
            result = Math.max(result, end - start + 1);
            end++;
        }
        
        return result;
    }
}

